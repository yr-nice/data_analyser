/*
 * DataAnalyserAboutBox.java
 */

package com.mu.stock.ui;

import com.mu.util.MathUtil;
import com.mu.util.RegexUtil;
import com.mu.util.StringUtil;
import com.mu.util.log.Log;
import com.mu.util.ui.TableUtil;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.application.Action;

public class DailyPriceFinder extends javax.swing.JDialog {

    public DailyPriceFinder(java.awt.Frame parent) {
        super(parent);
        initComponents();
    }

    @Action public void closeAboutBox() {
        dispose();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ppmFinder = new javax.swing.JPopupMenu();
        miAddRow = new javax.swing.JMenuItem();
        miRemoveRow = new javax.swing.JMenuItem();
        miUp = new javax.swing.JMenuItem();
        miDown = new javax.swing.JMenuItem();
        lbCpy = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDPFinder = new javax.swing.JTable();
        btnLast = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();

        ppmFinder.setName("ppmFinder"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.mu.stock.ui.DataAnalyserApp.class).getContext().getResourceMap(DailyPriceFinder.class);
        miAddRow.setText(resourceMap.getString("miAddRow.text")); // NOI18N
        miAddRow.setName("miAddRow"); // NOI18N
        miAddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAddRowActionPerformed(evt);
            }
        });
        ppmFinder.add(miAddRow);

        miRemoveRow.setText(resourceMap.getString("miRemoveRow.text")); // NOI18N
        miRemoveRow.setName("miRemoveRow"); // NOI18N
        miRemoveRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRemoveRowActionPerformed(evt);
            }
        });
        ppmFinder.add(miRemoveRow);

        miUp.setText(resourceMap.getString("miUp.text")); // NOI18N
        miUp.setName("miUp"); // NOI18N
        miUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miUpActionPerformed(evt);
            }
        });
        ppmFinder.add(miUp);

        miDown.setText(resourceMap.getString("miDown.text")); // NOI18N
        miDown.setName("miDown"); // NOI18N
        miDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDownActionPerformed(evt);
            }
        });
        ppmFinder.add(miDown);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(resourceMap.getString("title")); // NOI18N
        setName("PriceFinder"); // NOI18N

        lbCpy.setText(resourceMap.getString("lbCpy.text")); // NOI18N
        lbCpy.setName("lbCpy"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tblDPFinder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12", "Title 13", "Title 14", "Title 15", "Title 16"
            }
        ));
        tblDPFinder.setName("tblDPFinder"); // NOI18N
        tblDPFinder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblDPFinderMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblDPFinder);
        tblDPFinder.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tblDPFinder.columnModel.title0")); // NOI18N
        tblDPFinder.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tblDPFinder.columnModel.title1")); // NOI18N
        tblDPFinder.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("tblDPFinder.columnModel.title2")); // NOI18N
        tblDPFinder.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("tblDPFinder.columnModel.title3")); // NOI18N

        btnLast.setText(resourceMap.getString("btnLast.text")); // NOI18N
        btnLast.setName("btnLast"); // NOI18N
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnNext.setText(resourceMap.getString("btnNext.text")); // NOI18N
        btnNext.setName("btnNext"); // NOI18N
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 759, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbCpy, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLast))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCpy, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNext)
                    .addComponent(btnLast))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblDPFinderMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblDPFinderMouseReleased
    {//GEN-HEADEREND:event_tblDPFinderMouseReleased
        if(evt.isPopupTrigger())
        {
            ppmFinder.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tblDPFinderMouseReleased

    private void miAddRowActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miAddRowActionPerformed
    {//GEN-HEADEREND:event_miAddRowActionPerformed
        ((DefaultTableModel)tblDPFinder.getModel()).addRow(new Object[tblDPFinder.getColumnCount()]);
    }//GEN-LAST:event_miAddRowActionPerformed

    private void miRemoveRowActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miRemoveRowActionPerformed
    {//GEN-HEADEREND:event_miRemoveRowActionPerformed
        DefaultTableModel model = (DefaultTableModel)tblDPFinder.getModel();
        for(int i : tblDPFinder.getSelectedRows())
            model.removeRow(i);
    }//GEN-LAST:event_miRemoveRowActionPerformed

    private void miUpActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miUpActionPerformed
    {//GEN-HEADEREND:event_miUpActionPerformed
        DefaultTableModel model = (DefaultTableModel)tblDPFinder.getModel();
        for(int i : tblDPFinder.getSelectedRows())
            model.moveRow(i, i, i-1);
        // TODO add your handling code here:
    }//GEN-LAST:event_miUpActionPerformed

    private void miDownActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miDownActionPerformed
    {//GEN-HEADEREND:event_miDownActionPerformed
        DefaultTableModel model = (DefaultTableModel)tblDPFinder.getModel();
        if(tblDPFinder.getSelectedRows().length==0)
            return;
        for(int i=tblDPFinder.getSelectedRows().length-1; i>=0 ; i--)
            model.moveRow(i, i, i+1);
        // TODO add your handling code here:
    }//GEN-LAST:event_miDownActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnLastActionPerformed
    {//GEN-HEADEREND:event_btnLastActionPerformed
        search(false);
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnNextActionPerformed
    {//GEN-HEADEREND:event_btnNextActionPerformed
        search(true);
    }//GEN-LAST:event_btnNextActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbCpy;
    private javax.swing.JMenuItem miAddRow;
    private javax.swing.JMenuItem miDown;
    private javax.swing.JMenuItem miRemoveRow;
    private javax.swing.JMenuItem miUp;
    private javax.swing.JPopupMenu ppmFinder;
    private javax.swing.JTable tblDPFinder;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JTable tblTarget;
    private int lastMatch;

    public JTable getTblTarget()
    {
        return tblTarget;
    }

    public void setTblTarget(JTable tblTarget)
    {
        this.tblTarget = tblTarget;
        if(tblDPFinder.getColumnCount() != tblTarget.getColumnCount())
        {
            Object[][] data = new Object[1][tblTarget.getColumnCount()];
            ((DefaultTableModel)tblDPFinder.getModel()).setDataVector(data, TableUtil.getTableHeaders(tblTarget));
        }
    }

    private int getSearchStartRow()
    {
        int i = tblTarget.getSelectedRow();
        if(i==-1)
            i = TableUtil.getFirstVisibleRow(tblTarget);
        return i;
    }
    public void search(boolean downward)
    {
        
        DefaultTableModel model = (DefaultTableModel)tblTarget.getModel();
        int matched = -1;
        if(downward)
        {
            for(int i=getSearchStartRow()+1; i<tblTarget.getRowCount(); i++)
                if(isMatch(i))
                {
                    matched = i;
                    break;
                }
        }
        else if(getSearchStartRow()>0)
        {
            for(int i=getSearchStartRow()-1; i>=0; i--)
                if(isMatch(i))
                {
                    matched = i;
                    break;
                }
        }
        if(matched!=-1)
        {
            tblTarget.getSelectionModel().setSelectionInterval(matched, matched+tblDPFinder.getRowCount()-1);
            TableUtil.scrollToVisible(tblTarget, matched, 0);
            lastMatch = matched;
        }
            
    }

    private boolean isMatch(int i)
    {
        for(int c=0; c<tblDPFinder.getRowCount(); c++)
        {
            for(int j=0; j<tblDPFinder.getColumnCount(); j++)
            {
                if(!isColMatch(tblTarget.getValueAt(c+i, j), tblDPFinder.getValueAt(c, j), c+i))
                    return false;
            }
        }
        return true;
    }

    private float getExpressionValue(String s, int x)
    {
        s = s.trim().toLowerCase();
        List<String> cols = RegexUtil.getAllUniqueMatch(s, "(c\\-?[\\d]+\\.\\-?[\\d]+)");
        for(String c : cols)
        {
            String[] arr = c.substring(1).split("\\.");
            Object o = tblTarget.getValueAt(x+Integer.parseInt(arr[0]), Integer.parseInt(arr[1]));
            s = s.replaceAll(c, o.toString());
        }
        return MathUtil.eval(s);
    }
    private boolean isColMatch(Object src, Object oCriteria, int x)
    {
        if(oCriteria==null)
            return true;
        String criteria = oCriteria.toString();
        if(StringUtil.isEmpty(criteria))
            return true;
        if(criteria.indexOf(",")==-1)
            return criteria.equalsIgnoreCase(src.toString());
        else
        {
            String[] arr = criteria.split(",");
            if(!StringUtil.isEmpty(arr[0]))
            {
                if(src instanceof Float || src instanceof Integer)
                {
                    float f = getExpressionValue(arr[0], x);
                    if( Float.valueOf(src.toString()).floatValue() < f)
                        return false;
                }
                else
                {
                    if( src==null || src.toString().compareTo(arr[0])<0)
                        return false;
                }
            }
            if(arr.length>1 && !StringUtil.isEmpty(arr[1]))
            {
                if(src instanceof Float || src instanceof Integer)
                {
                    float f = getExpressionValue(arr[1], x);
                    if( Float.valueOf(src.toString()).floatValue() > f)
                        return false;
                }
                else
                {
                    if( src==null || src.toString().compareTo(arr[1])>0)
                        return false;
                }
            }
            return true;
        }
    }

    static public void main(String[] argu)
    {
        String s = "c10.20-15c20.-30+100";
        List<String> cols = RegexUtil.getAllUniqueMatch(s, "(c\\-?[\\d]+\\.\\-?[\\d]+)");
        for(String a : cols)
            Log.info(a);
    }

}
