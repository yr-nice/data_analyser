/*
 * DataAnalyserAboutBox.java
 */

package com.mu.stock.ui;

import com.mu.collection.AutoDiscardingQueue;
import com.mu.stock.cfg.CfgMgr;
import com.mu.stock.chart.ChartDataMgr;
import com.mu.stock.chart.ChartMeasurer;
import com.mu.stock.chart.CoordinateUpdater;
import com.mu.stock.chart.DrawType;
import com.mu.stock.chart.GroupDrawer;
import com.mu.stock.chart.IDType;
import com.mu.stock.chart.Indicator;
import com.mu.stock.chart.KeyboardListener;
import com.mu.stock.chart.PointDiff;
import com.mu.stock.chart.WheelZoomer;
import com.mu.stock.dao.CompanyDAO;
import com.mu.stock.entity.Account;
import com.mu.stock.entity.Company;
import com.mu.stock.entity.DailyPriceLog;
import com.mu.util.DateUtil;
import com.mu.util.MathUtil;
import com.mu.util.log.Log;
import com.mu.util.ui.ChartUtil;
import java.awt.event.ActionEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import org.jdesktop.application.Action;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickMarkPosition;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.data.xy.XYDataset;

public class ChartView extends javax.swing.JDialog {
    private AutoDiscardingQueue<DailyPriceLog> dplist = new AutoDiscardingQueue<DailyPriceLog>(Integer.MAX_VALUE);
    private AutoDiscardingQueue<Date> dates = new AutoDiscardingQueue<Date>(Integer.MAX_VALUE);
    private int dateDrift=0;
    private float priceDrift=1F;
    AccountTxnView atv;
    Account acct;
    ChartDataMgr cdm;
    Company cpy;
    List<Company> cpyInContrast = new ArrayList<Company>();
    DateAxis xAx = new DateAxis("Date");
    CombinedDomainXYPlot mainPlot = new CombinedDomainXYPlot(xAx);;
    JFreeChart chart = new JFreeChart("", null, mainPlot, false);
    ChartPanel chPanel = new ChartPanel(chart);
    Map<String, XYPlot> plots = new HashMap<String, XYPlot>();
    //DailyPriceLog latestDP;
    GroupDrawer g = new GroupDrawer(this);
    ChartMeasurer m = new ChartMeasurer(this);
    CoordinateUpdater cu = new CoordinateUpdater(this);
    WheelZoomer wz = new WheelZoomer(this);
    KeyboardListener kb = new KeyboardListener(this);
    ButtonGroup btnGroup= new ButtonGroup();
    Date showUpto;
    Date accessUpto;
    Date accessFrom;

    public ChartView(java.awt.Frame parent, Company cpy, Date accessFrom, Date accessUpto, Date showUpto, int listSize, AccountTxnView atv)
    {
        //List<Date> dates,
        super(parent);
        initComponents();
        this.dates.setCapacity(listSize);
        //this.dates.pushAll(dates);
        this.atv = atv;
        this.cpy = cpy;
        this.accessFrom = accessFrom;
        this.accessUpto = accessUpto;
        this.showUpto = showUpto;
        if(atv != null)
        {
            this.acct = atv.getAcct();
            this.dateDrift = acct.getDateDrift();
            this.priceDrift = acct.getPriceDrift();
            lblSummary.setText(atv.getSummary());
        }
        cdm = new ChartDataMgr(cpy, dateDrift, priceDrift);
        if(this.accessFrom==null)
            this.accessFrom = DateUtil.nextNDay(cdm.getDateByIndex(1), (-1)*dateDrift);
        if(this.accessUpto==null)
            this.accessUpto = new Date();

        this.dates.pushAll(cdm.getDaysUpto(DateUtil.nextNDay(this.accessFrom, dateDrift), DateUtil.nextNDay(showUpto, dateDrift)));
        init();
    }
    public ChartView(java.awt.Frame parent, Company cpy, Date showUpto, int listSize)
    {
        this(parent, cpy, null, null,showUpto,listSize,null);
    }
 



    @Action public void closeAboutBox() {
        dispose();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ppmChart = new javax.swing.JPopupMenu();
        miBuy = new javax.swing.JMenuItem();
        miSell = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        ppmTrace = new javax.swing.JMenu();
        miNone = new javax.swing.JMenuItem();
        miVTrace = new javax.swing.JMenuItem();
        miHTrace = new javax.swing.JMenuItem();
        miCHTrace = new javax.swing.JMenuItem();
        miVMarker = new javax.swing.JMenuItem();
        miHMarker = new javax.swing.JMenuItem();
        miRangeZoom = new javax.swing.JCheckBoxMenuItem();
        miMeasurer = new javax.swing.JCheckBoxMenuItem();
        ppmGroupDraw = new javax.swing.JMenu();
        miMidH = new javax.swing.JRadioButtonMenuItem();
        miTrisH = new javax.swing.JRadioButtonMenuItem();
        miQuartH = new javax.swing.JRadioButtonMenuItem();
        miTrisS = new javax.swing.JRadioButtonMenuItem();
        miPitchfork = new javax.swing.JRadioButtonMenuItem();
        miLine = new javax.swing.JRadioButtonMenuItem();
        miLineEx = new javax.swing.JRadioButtonMenuItem();
        miHand = new javax.swing.JRadioButtonMenuItem();
        miFFan = new javax.swing.JRadioButtonMenuItem();
        miFRet = new javax.swing.JRadioButtonMenuItem();
        miFProj = new javax.swing.JRadioButtonMenuItem();
        miFTZ = new javax.swing.JRadioButtonMenuItem();
        miFCircle = new javax.swing.JRadioButtonMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        miMoveLeft = new javax.swing.JMenuItem();
        miMoveRight = new javax.swing.JMenuItem();
        ppmDataRange = new javax.swing.JMenu();
        mi1m = new javax.swing.JMenuItem();
        mi3m = new javax.swing.JMenuItem();
        mi6m = new javax.swing.JMenuItem();
        mi1y = new javax.swing.JMenuItem();
        mi3y = new javax.swing.JMenuItem();
        mi5y = new javax.swing.JMenuItem();
        miAll = new javax.swing.JMenuItem();
        spChart = new javax.swing.JSplitPane();
        scpChart = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        btnDel = new javax.swing.JButton();
        cbIndicator = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        ltIndicator = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        tfParams = new javax.swing.JTextArea();
        tfPlot = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        cbbCpy = new javax.swing.JComboBox();
        btnAddCpy = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tfMeasure = new javax.swing.JTextArea();
        btnNextDay = new javax.swing.JButton();
        btnBuy = new javax.swing.JButton();
        btnSell = new javax.swing.JButton();
        lblCoordinate = new javax.swing.JLabel();
        lblSummary = new javax.swing.JLabel();
        btnTest = new javax.swing.JButton();

        ppmChart.setName("ppmChart"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.mu.stock.ui.DataAnalyserApp.class).getContext().getResourceMap(ChartView.class);
        miBuy.setText(resourceMap.getString("miBuy.text")); // NOI18N
        miBuy.setName("miBuy"); // NOI18N
        miBuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miBuyActionPerformed(evt);
            }
        });
        ppmChart.add(miBuy);

        miSell.setText(resourceMap.getString("miSell.text")); // NOI18N
        miSell.setName("miSell"); // NOI18N
        miSell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSellActionPerformed(evt);
            }
        });
        ppmChart.add(miSell);

        jSeparator1.setName("jSeparator1"); // NOI18N
        ppmChart.add(jSeparator1);

        ppmTrace.setText(resourceMap.getString("ppmTrace.text")); // NOI18N
        ppmTrace.setName("ppmTrace"); // NOI18N

        miNone.setText(resourceMap.getString("miNone.text")); // NOI18N
        miNone.setName("miNone"); // NOI18N
        miNone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNoneActionPerformed(evt);
            }
        });
        ppmTrace.add(miNone);

        miVTrace.setText(resourceMap.getString("miVTrace.text")); // NOI18N
        miVTrace.setName("miVTrace"); // NOI18N
        miVTrace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miVTraceActionPerformed(evt);
            }
        });
        ppmTrace.add(miVTrace);

        miHTrace.setText(resourceMap.getString("miHTrace.text")); // NOI18N
        miHTrace.setName("miHTrace"); // NOI18N
        miHTrace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miHTraceActionPerformed(evt);
            }
        });
        ppmTrace.add(miHTrace);

        miCHTrace.setText(resourceMap.getString("miCHTrace.text")); // NOI18N
        miCHTrace.setName("miCHTrace"); // NOI18N
        miCHTrace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCHTraceActionPerformed(evt);
            }
        });
        ppmTrace.add(miCHTrace);

        ppmChart.add(ppmTrace);

        miVMarker.setText(resourceMap.getString("miVMarker.text")); // NOI18N
        miVMarker.setName("miVMarker"); // NOI18N
        miVMarker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miVMarkerActionPerformed(evt);
            }
        });
        ppmChart.add(miVMarker);

        miHMarker.setText(resourceMap.getString("miHMarker.text")); // NOI18N
        miHMarker.setName("miHMarker"); // NOI18N
        miHMarker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miHMarkerActionPerformed(evt);
            }
        });
        ppmChart.add(miHMarker);

        miRangeZoom.setText(resourceMap.getString("miRangeZoom.text")); // NOI18N
        miRangeZoom.setName("miRangeZoom"); // NOI18N
        miRangeZoom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                miRangeZoomItemStateChanged(evt);
            }
        });
        ppmChart.add(miRangeZoom);

        miMeasurer.setText(resourceMap.getString("miMeasurer.text")); // NOI18N
        miMeasurer.setName("miMeasurer"); // NOI18N
        miMeasurer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                miMeasurerItemStateChanged(evt);
            }
        });
        ppmChart.add(miMeasurer);

        ppmGroupDraw.setText(resourceMap.getString("ppmGroupDraw.text")); // NOI18N
        ppmGroupDraw.setName("ppmGroupDraw"); // NOI18N

        btnGroup.add(miMidH);
        miMidH.setText(resourceMap.getString("miMidH.text")); // NOI18N
        miMidH.setName("miMidH"); // NOI18N
        miMidH.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                miMidHItemStateChanged(evt);
            }
        });
        ppmGroupDraw.add(miMidH);

        btnGroup.add(miTrisH);
        miTrisH.setText(resourceMap.getString("miTrisH.text")); // NOI18N
        miTrisH.setName("miTrisH"); // NOI18N
        miTrisH.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                miTrisHItemStateChanged(evt);
            }
        });
        ppmGroupDraw.add(miTrisH);

        btnGroup.add(miQuartH);
        miQuartH.setText(resourceMap.getString("miQuartH.text")); // NOI18N
        miQuartH.setName("miQuartH"); // NOI18N
        miQuartH.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                miQuartHItemStateChanged(evt);
            }
        });
        ppmGroupDraw.add(miQuartH);

        btnGroup.add(miTrisS);
        miTrisS.setText(resourceMap.getString("miTrisS.text")); // NOI18N
        miTrisS.setName("miTrisS"); // NOI18N
        miTrisS.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                miTrisSItemStateChanged(evt);
            }
        });
        ppmGroupDraw.add(miTrisS);

        btnGroup.add(miPitchfork);
        miPitchfork.setText(resourceMap.getString("miPitchfork.text")); // NOI18N
        miPitchfork.setName("miPitchfork"); // NOI18N
        miPitchfork.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                miPitchforkItemStateChanged(evt);
            }
        });
        ppmGroupDraw.add(miPitchfork);

        btnGroup.add(miLine);
        miLine.setText(resourceMap.getString("miLine.text")); // NOI18N
        miLine.setName("miLine"); // NOI18N
        miLine.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                miLineItemStateChanged(evt);
            }
        });
        ppmGroupDraw.add(miLine);

        btnGroup.add(miLineEx);
        miLineEx.setText(resourceMap.getString("miLineEx.text")); // NOI18N
        miLineEx.setName("miLineEx"); // NOI18N
        miLineEx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                miLineExItemStateChanged(evt);
            }
        });
        ppmGroupDraw.add(miLineEx);

        btnGroup.add(miHand);
        miHand.setText(resourceMap.getString("miHand.text")); // NOI18N
        miHand.setName("miHand"); // NOI18N
        miHand.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                miHandItemStateChanged(evt);
            }
        });
        ppmGroupDraw.add(miHand);

        btnGroup.add(miFFan);
        miFFan.setText(resourceMap.getString("miFFan.text")); // NOI18N
        miFFan.setName("miFFan"); // NOI18N
        miFFan.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                miFFanItemStateChanged(evt);
            }
        });
        ppmGroupDraw.add(miFFan);

        btnGroup.add(miFRet);
        miFRet.setText(resourceMap.getString("miFRet.text")); // NOI18N
        miFRet.setName("miFRet"); // NOI18N
        miFRet.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                miFRetItemStateChanged(evt);
            }
        });
        ppmGroupDraw.add(miFRet);

        btnGroup.add(miFProj);
        miFProj.setText(resourceMap.getString("miFProj.text")); // NOI18N
        miFProj.setName("miFProj"); // NOI18N
        miFProj.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                miFProjItemStateChanged(evt);
            }
        });
        ppmGroupDraw.add(miFProj);

        btnGroup.add(miFTZ);
        miFTZ.setText(resourceMap.getString("miFTZ.text")); // NOI18N
        miFTZ.setName("miFTZ"); // NOI18N
        miFTZ.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                miFTZItemStateChanged(evt);
            }
        });
        ppmGroupDraw.add(miFTZ);

        btnGroup.add(miFCircle);
        miFCircle.setText(resourceMap.getString("miFCircle.text")); // NOI18N
        miFCircle.setName("miFCircle"); // NOI18N
        miFCircle.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                miFCircleItemStateChanged(evt);
            }
        });
        ppmGroupDraw.add(miFCircle);

        ppmChart.add(ppmGroupDraw);

        jSeparator2.setName("jSeparator2"); // NOI18N
        ppmChart.add(jSeparator2);

        miMoveLeft.setText(resourceMap.getString("miMoveLeft.text")); // NOI18N
        miMoveLeft.setName("miMoveLeft"); // NOI18N
        miMoveLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miMoveLeftActionPerformed(evt);
            }
        });
        ppmChart.add(miMoveLeft);

        miMoveRight.setText(resourceMap.getString("miMoveRight.text")); // NOI18N
        miMoveRight.setName("miMoveRight"); // NOI18N
        miMoveRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miMoveRightActionPerformed(evt);
            }
        });
        ppmChart.add(miMoveRight);

        ppmDataRange.setText(resourceMap.getString("ppmDataRange.text")); // NOI18N
        ppmDataRange.setName("ppmDataRange"); // NOI18N

        mi1m.setText(resourceMap.getString("mi1m.text")); // NOI18N
        mi1m.setName("mi1m"); // NOI18N
        mi1m.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mi1mItemStateChanged(evt);
            }
        });
        mi1m.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi1mActionPerformed(evt);
            }
        });
        ppmDataRange.add(mi1m);

        mi3m.setText(resourceMap.getString("mi3m.text")); // NOI18N
        mi3m.setName("mi3m"); // NOI18N
        mi3m.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi3mActionPerformed(evt);
            }
        });
        ppmDataRange.add(mi3m);

        mi6m.setText(resourceMap.getString("mi6m.text")); // NOI18N
        mi6m.setName("mi6m"); // NOI18N
        mi6m.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi6mActionPerformed(evt);
            }
        });
        ppmDataRange.add(mi6m);

        mi1y.setText(resourceMap.getString("mi1y.text")); // NOI18N
        mi1y.setName("mi1y"); // NOI18N
        mi1y.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi1yActionPerformed(evt);
            }
        });
        ppmDataRange.add(mi1y);

        mi3y.setText(resourceMap.getString("mi3y.text")); // NOI18N
        mi3y.setName("mi3y"); // NOI18N
        mi3y.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi3yActionPerformed(evt);
            }
        });
        ppmDataRange.add(mi3y);

        mi5y.setText(resourceMap.getString("mi5y.text")); // NOI18N
        mi5y.setName("mi5y"); // NOI18N
        mi5y.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi5yActionPerformed(evt);
            }
        });
        ppmDataRange.add(mi5y);

        miAll.setText(resourceMap.getString("miAll.text")); // NOI18N
        miAll.setActionCommand(resourceMap.getString("miAll.actionCommand")); // NOI18N
        miAll.setName("miAll"); // NOI18N
        miAll.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                miAllItemStateChanged(evt);
            }
        });
        miAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAllActionPerformed(evt);
            }
        });
        ppmDataRange.add(miAll);

        ppmChart.add(ppmDataRange);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        spChart.setDividerLocation(177);
        spChart.setName("spChart"); // NOI18N

        scpChart.setName("scpChart"); // NOI18N
        scpChart.setPreferredSize(new java.awt.Dimension(177, 595));

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(170, 591));

        btnDel.setText(resourceMap.getString("btnDel.text")); // NOI18N
        btnDel.setName("btnDel"); // NOI18N
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        cbIndicator.setMaximumRowCount(30);
        cbIndicator.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));
        cbIndicator.setName("cbIndicator"); // NOI18N
        cbIndicator.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbIndicatorItemStateChanged(evt);
            }
        });
        cbIndicator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbIndicatorActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        ltIndicator.setModel(new DefaultListModel());
        ltIndicator.setName("ltIndicator"); // NOI18N
        ltIndicator.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ltIndicatorValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(ltIndicator);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        tfParams.setColumns(1);
        tfParams.setFont(resourceMap.getFont("tfParams.font")); // NOI18N
        tfParams.setRows(5);
        tfParams.setName("tfParams"); // NOI18N
        tfParams.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfParamsKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tfParams);

        tfPlot.setText(resourceMap.getString("tfPlot.text")); // NOI18N
        tfPlot.setName("tfPlot"); // NOI18N
        tfPlot.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfPlotKeyReleased(evt);
            }
        });

        btnUpdate.setText(resourceMap.getString("btnUpdate.text")); // NOI18N
        btnUpdate.setName("btnUpdate"); // NOI18N
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        cbbCpy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbbCpy.setName("cbbCpy"); // NOI18N

        btnAddCpy.setText(resourceMap.getString("btnAddCpy.text")); // NOI18N
        btnAddCpy.setName("btnAddCpy"); // NOI18N
        btnAddCpy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCpyActionPerformed(evt);
            }
        });

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        tfMeasure.setColumns(1);
        tfMeasure.setFont(resourceMap.getFont("tfMeasure.font")); // NOI18N
        tfMeasure.setRows(5);
        tfMeasure.setName("tfMeasure"); // NOI18N
        tfMeasure.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfMeasureKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tfMeasure);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnAddCpy))
                    .addComponent(cbIndicator, javax.swing.GroupLayout.Alignment.LEADING, 0, 172, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                    .addComponent(tfPlot, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                    .addComponent(cbbCpy, javax.swing.GroupLayout.Alignment.LEADING, 0, 172, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfPlot, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbbCpy, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(btnAddCpy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                .addContainerGap())
        );

        scpChart.setViewportView(jPanel1);

        spChart.setLeftComponent(scpChart);

        btnNextDay.setText(resourceMap.getString("btnNextDay.text")); // NOI18N
        btnNextDay.setName("btnNextDay"); // NOI18N
        btnNextDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextDayActionPerformed(evt);
            }
        });

        btnBuy.setText(resourceMap.getString("btnBuy.text")); // NOI18N
        btnBuy.setName("btnBuy"); // NOI18N
        btnBuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuyActionPerformed(evt);
            }
        });

        btnSell.setText(resourceMap.getString("btnSell.text")); // NOI18N
        btnSell.setName("btnSell"); // NOI18N
        btnSell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSellActionPerformed(evt);
            }
        });

        lblCoordinate.setText(resourceMap.getString("lblCoordinate.text")); // NOI18N
        lblCoordinate.setName("lblCoordinate"); // NOI18N

        lblSummary.setText(resourceMap.getString("lblSummary.text")); // NOI18N
        lblSummary.setName("lblSummary"); // NOI18N

        btnTest.setText(resourceMap.getString("btnTest.text")); // NOI18N
        btnTest.setName("btnTest"); // NOI18N
        btnTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSummary, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(lblCoordinate, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSell)
                .addGap(10, 10, 10)
                .addComponent(btnNextDay)
                .addGap(37, 37, 37))
            .addComponent(spChart, javax.swing.GroupLayout.DEFAULT_SIZE, 984, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNextDay)
                    .addComponent(btnBuy)
                    .addComponent(btnSell)
                    .addComponent(lblCoordinate)
                    .addComponent(lblSummary)
                    .addComponent(btnTest))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spChart, javax.swing.GroupLayout.DEFAULT_SIZE, 665, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNextDayActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnNextDayActionPerformed
    {//GEN-HEADEREND:event_btnNextDayActionPerformed
        if(atv!=null)
        {
            atv.nextDay();
            lblSummary.setText(atv.getSummary());
        }

    }//GEN-LAST:event_btnNextDayActionPerformed

    private void btnBuyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnBuyActionPerformed
    {//GEN-HEADEREND:event_btnBuyActionPerformed
        /*if(atv!=null&&latestDP!=null)
        {
            atv.showBuySell(TxnLog.Buy, cpy, latestDP.getAdjClose()*priceDrift);
        }*/
    }//GEN-LAST:event_btnBuyActionPerformed

    private void btnSellActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSellActionPerformed
    {//GEN-HEADEREND:event_btnSellActionPerformed
        /*if(atv!=null&&latestDP!=null)
        {
            atv.showBuySell(TxnLog.Sell, cpy, latestDP.getAdjClose()*priceDrift);
        }*/
    }//GEN-LAST:event_btnSellActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDelActionPerformed
    {//GEN-HEADEREND:event_btnDelActionPerformed
        DefaultListModel m = (DefaultListModel)ltIndicator.getModel();
        for(int i : ltIndicator.getSelectedIndices())
            m.remove(i);
        updateChart();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDelActionPerformed

    private void ltIndicatorValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_ltIndicatorValueChanged
    {//GEN-HEADEREND:event_ltIndicatorValueChanged
        Indicator id = (Indicator)ltIndicator.getSelectedValue();
        if(id==null)
            tfParams.setText("");
        else
        {
            tfParams.setText(id.params.replaceAll("\\|", "\n"));
            tfPlot.setText(id.plot);
        }
    }//GEN-LAST:event_ltIndicatorValueChanged

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnUpdateActionPerformed
    {//GEN-HEADEREND:event_btnUpdateActionPerformed
        updateChart();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void cbIndicatorActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbIndicatorActionPerformed
    {//GEN-HEADEREND:event_cbIndicatorActionPerformed
        Indicator id = (Indicator)cbIndicator.getSelectedItem();
        if(id==null)
            return;

        DefaultListModel m = (DefaultListModel)ltIndicator.getModel();
        boolean ignore = false;
        if(id.name.equalsIgnoreCase("Candlestick"))
        {
            for(Object o : m.toArray())
            {
                Indicator io = (Indicator)o;
                if(io.toString().equals(id.toString()))
                    ignore=true;
            }
        }
        if(!ignore)
            m.addElement(new Indicator(id));
}//GEN-LAST:event_cbIndicatorActionPerformed

    private void tfParamsKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_tfParamsKeyReleased
    {//GEN-HEADEREND:event_tfParamsKeyReleased
        String params = tfParams.getText().replaceAll("\\n", "|");
        Indicator id = (Indicator)ltIndicator.getSelectedValue();
        id.params = params;
        ltIndicator.repaint();
}//GEN-LAST:event_tfParamsKeyReleased

    private void tfPlotKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_tfPlotKeyReleased
    {//GEN-HEADEREND:event_tfPlotKeyReleased
        Indicator id = (Indicator)ltIndicator.getSelectedValue();
        id.plot = tfPlot.getText();
        // TODO add your handling code here:
}//GEN-LAST:event_tfPlotKeyReleased

    private void miBuyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miBuyActionPerformed
    {//GEN-HEADEREND:event_miBuyActionPerformed
        popupBuySell(evt);
    }//GEN-LAST:event_miBuyActionPerformed

    private void miSellActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miSellActionPerformed
    {//GEN-HEADEREND:event_miSellActionPerformed
        popupBuySell(evt);
    }//GEN-LAST:event_miSellActionPerformed

    private void miVMarkerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miVMarkerActionPerformed
    {//GEN-HEADEREND:event_miVMarkerActionPerformed
        double x = ChartUtil.x2val(chPanel, g.getLastPoint());
        Indicator id = new Indicator("VM","v="+x+"&color=blue",1,"main",StandardXYItemRenderer.class,IDType.VMark);
        addToIndicatorList(id);
        updateChart();
    }//GEN-LAST:event_miVMarkerActionPerformed

    private void miHMarkerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miHMarkerActionPerformed
    {//GEN-HEADEREND:event_miHMarkerActionPerformed
        double y = ChartUtil.y2val(chPanel, g.getLastPoint());
        XYPlot p = ChartUtil.getPlotByPoint(chPanel, g.getLastPoint());
        Indicator id = new Indicator("HM","v="+y+"&color=blue",1,getPlotName(p),StandardXYItemRenderer.class,IDType.HMark);
        addToIndicatorList(id);
        updateChart();
    }//GEN-LAST:event_miHMarkerActionPerformed

    private void btnTestActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnTestActionPerformed
    {//GEN-HEADEREND:event_btnTestActionPerformed
       
    }//GEN-LAST:event_btnTestActionPerformed

    private void miRangeZoomItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_miRangeZoomItemStateChanged
    {//GEN-HEADEREND:event_miRangeZoomItemStateChanged
        chPanel.setRangeZoomable(miRangeZoom.getState());
    }//GEN-LAST:event_miRangeZoomItemStateChanged

    private void miTrisHItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_miTrisHItemStateChanged
    {//GEN-HEADEREND:event_miTrisHItemStateChanged
        if(miTrisH.isSelected())
        {
            g.setType(DrawType.TrisH);
        }
    }//GEN-LAST:event_miTrisHItemStateChanged

    private void mi1mActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mi1mActionPerformed
    {//GEN-HEADEREND:event_mi1mActionPerformed
        setCapacity(23);
    }//GEN-LAST:event_mi1mActionPerformed

    private void mi3mActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mi3mActionPerformed
    {//GEN-HEADEREND:event_mi3mActionPerformed
        setCapacity(23*3);
    }//GEN-LAST:event_mi3mActionPerformed

    private void mi6mActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mi6mActionPerformed
    {//GEN-HEADEREND:event_mi6mActionPerformed
        setCapacity(23*6);
    }//GEN-LAST:event_mi6mActionPerformed

    private void mi1yActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mi1yActionPerformed
    {//GEN-HEADEREND:event_mi1yActionPerformed
        setCapacity(255);
    }//GEN-LAST:event_mi1yActionPerformed

    private void mi3yActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mi3yActionPerformed
    {//GEN-HEADEREND:event_mi3yActionPerformed
        setCapacity(255*3);
    }//GEN-LAST:event_mi3yActionPerformed

    private void mi5yActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mi5yActionPerformed
    {//GEN-HEADEREND:event_mi5yActionPerformed
        setCapacity(255*5);
    }//GEN-LAST:event_mi5yActionPerformed

    private void miMoveLeftActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miMoveLeftActionPerformed
    {//GEN-HEADEREND:event_miMoveLeftActionPerformed
        move(-0.5);
    }//GEN-LAST:event_miMoveLeftActionPerformed

    private void miMoveRightActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miMoveRightActionPerformed
    {//GEN-HEADEREND:event_miMoveRightActionPerformed
        move(0.5);
    }//GEN-LAST:event_miMoveRightActionPerformed

    private void miLineExItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_miLineExItemStateChanged
    {//GEN-HEADEREND:event_miLineExItemStateChanged
        if(miLineEx.isSelected())
        {
            g.setType(DrawType.LineEx);
        }
    }//GEN-LAST:event_miLineExItemStateChanged

    private void miTrisSItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_miTrisSItemStateChanged
    {//GEN-HEADEREND:event_miTrisSItemStateChanged
        if(miTrisS.isSelected())
        {
            g.setType(DrawType.TrisS);
        }
    }//GEN-LAST:event_miTrisSItemStateChanged

    private void miMidHItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_miMidHItemStateChanged
    {//GEN-HEADEREND:event_miMidHItemStateChanged
        if(miMidH.isSelected())
        {
            g.setType(DrawType.MidH);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_miMidHItemStateChanged

    private void miQuartHItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_miQuartHItemStateChanged
    {//GEN-HEADEREND:event_miQuartHItemStateChanged
        if(miQuartH.isSelected())
        {
            g.setType(DrawType.QuartH);
        }// TODO add your handling code here:
    }//GEN-LAST:event_miQuartHItemStateChanged

    private void miLineItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_miLineItemStateChanged
    {//GEN-HEADEREND:event_miLineItemStateChanged
        if(miLine.isSelected())
        {
            g.setType(DrawType.Line);
        }
    }//GEN-LAST:event_miLineItemStateChanged

    private void miHandItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_miHandItemStateChanged
    {//GEN-HEADEREND:event_miHandItemStateChanged
        if(miHand.isSelected())
        {
            g.setType(DrawType.HandDraw);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_miHandItemStateChanged

    private void miNoneActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miNoneActionPerformed
    {//GEN-HEADEREND:event_miNoneActionPerformed
        setTrace(false, false);
    }//GEN-LAST:event_miNoneActionPerformed

    private void miVTraceActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miVTraceActionPerformed
    {//GEN-HEADEREND:event_miVTraceActionPerformed
        setTrace(true, false);
        // TODO add your handling code here:
    }//GEN-LAST:event_miVTraceActionPerformed

    private void miHTraceActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miHTraceActionPerformed
    {//GEN-HEADEREND:event_miHTraceActionPerformed
        setTrace(false, true);
        // TODO add your handling code here:
    }//GEN-LAST:event_miHTraceActionPerformed

    private void miCHTraceActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miCHTraceActionPerformed
    {//GEN-HEADEREND:event_miCHTraceActionPerformed
        setTrace(true, true);
        // TODO add your handling code here:
    }//GEN-LAST:event_miCHTraceActionPerformed

    private void mi1mItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_mi1mItemStateChanged
    {//GEN-HEADEREND:event_mi1mItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_mi1mItemStateChanged

    private void miFFanItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_miFFanItemStateChanged
    {//GEN-HEADEREND:event_miFFanItemStateChanged
        if(miFFan.isSelected())
            g.setType(DrawType.FibonacciFans);
    }//GEN-LAST:event_miFFanItemStateChanged

    private void miFRetItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_miFRetItemStateChanged
    {//GEN-HEADEREND:event_miFRetItemStateChanged
        if(miFRet.isSelected())
            g.setType(DrawType.FibonacciRetreatment);
        // TODO add your handling code here:
    }//GEN-LAST:event_miFRetItemStateChanged

    private void miFProjItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_miFProjItemStateChanged
    {//GEN-HEADEREND:event_miFProjItemStateChanged
        if(miFProj.isSelected())
            g.setType(DrawType.FibonacciProjection);
        // TODO add your handling code here:
    }//GEN-LAST:event_miFProjItemStateChanged

    private void miFTZItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_miFTZItemStateChanged
    {//GEN-HEADEREND:event_miFTZItemStateChanged
        if(miFTZ.isSelected())
            g.setType(DrawType.FibonacciTimeZone);
    }//GEN-LAST:event_miFTZItemStateChanged

    private void miFCircleItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_miFCircleItemStateChanged
    {//GEN-HEADEREND:event_miFCircleItemStateChanged
        if(miFCircle.isSelected())
            g.setType(DrawType.FibonacciCircle);
        // TODO add your handling code here:
    }//GEN-LAST:event_miFCircleItemStateChanged

    private void btnAddCpyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddCpyActionPerformed
    {//GEN-HEADEREND:event_btnAddCpyActionPerformed
        addCpyInContrast((Company)cbbCpy.getSelectedItem());
    }//GEN-LAST:event_btnAddCpyActionPerformed

    private void miPitchforkItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_miPitchforkItemStateChanged
    {//GEN-HEADEREND:event_miPitchforkItemStateChanged
        if(miPitchfork.isSelected())
            g.setType(DrawType.Pitchfork);
    }//GEN-LAST:event_miPitchforkItemStateChanged

    private void cbIndicatorItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_cbIndicatorItemStateChanged
    {//GEN-HEADEREND:event_cbIndicatorItemStateChanged

    }//GEN-LAST:event_cbIndicatorItemStateChanged

    private void tfMeasureKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_tfMeasureKeyReleased
    {//GEN-HEADEREND:event_tfMeasureKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tfMeasureKeyReleased

    private void miMeasurerItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_miMeasurerItemStateChanged
    {//GEN-HEADEREND:event_miMeasurerItemStateChanged
        if(miMeasurer.getState())
            m.enable();
        else
            m.disable();

    }//GEN-LAST:event_miMeasurerItemStateChanged

    private void miAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miAllActionPerformed
    {//GEN-HEADEREND:event_miAllActionPerformed
        setCapacity(Integer.MAX_VALUE);
    }//GEN-LAST:event_miAllActionPerformed

    private void miAllItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_miAllItemStateChanged
    {//GEN-HEADEREND:event_miAllItemStateChanged
        
    }//GEN-LAST:event_miAllItemStateChanged
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCpy;
    private javax.swing.JButton btnBuy;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnNextDay;
    private javax.swing.JButton btnSell;
    private javax.swing.JButton btnTest;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox cbIndicator;
    private javax.swing.JComboBox cbbCpy;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JLabel lblCoordinate;
    private javax.swing.JLabel lblSummary;
    private javax.swing.JList ltIndicator;
    private javax.swing.JMenuItem mi1m;
    private javax.swing.JMenuItem mi1y;
    private javax.swing.JMenuItem mi3m;
    private javax.swing.JMenuItem mi3y;
    private javax.swing.JMenuItem mi5y;
    private javax.swing.JMenuItem mi6m;
    private javax.swing.JMenuItem miAll;
    private javax.swing.JMenuItem miBuy;
    private javax.swing.JMenuItem miCHTrace;
    private javax.swing.JRadioButtonMenuItem miFCircle;
    private javax.swing.JRadioButtonMenuItem miFFan;
    private javax.swing.JRadioButtonMenuItem miFProj;
    private javax.swing.JRadioButtonMenuItem miFRet;
    private javax.swing.JRadioButtonMenuItem miFTZ;
    private javax.swing.JMenuItem miHMarker;
    private javax.swing.JMenuItem miHTrace;
    private javax.swing.JRadioButtonMenuItem miHand;
    private javax.swing.JRadioButtonMenuItem miLine;
    private javax.swing.JRadioButtonMenuItem miLineEx;
    private javax.swing.JCheckBoxMenuItem miMeasurer;
    private javax.swing.JRadioButtonMenuItem miMidH;
    private javax.swing.JMenuItem miMoveLeft;
    private javax.swing.JMenuItem miMoveRight;
    private javax.swing.JMenuItem miNone;
    private javax.swing.JRadioButtonMenuItem miPitchfork;
    private javax.swing.JRadioButtonMenuItem miQuartH;
    private javax.swing.JCheckBoxMenuItem miRangeZoom;
    private javax.swing.JMenuItem miSell;
    private javax.swing.JRadioButtonMenuItem miTrisH;
    private javax.swing.JRadioButtonMenuItem miTrisS;
    private javax.swing.JMenuItem miVMarker;
    private javax.swing.JMenuItem miVTrace;
    private javax.swing.JPopupMenu ppmChart;
    private javax.swing.JMenu ppmDataRange;
    private javax.swing.JMenu ppmGroupDraw;
    private javax.swing.JMenu ppmTrace;
    private javax.swing.JScrollPane scpChart;
    private javax.swing.JSplitPane spChart;
    private javax.swing.JTextArea tfMeasure;
    private javax.swing.JTextArea tfParams;
    private javax.swing.JTextField tfPlot;
    // End of variables declaration//GEN-END:variables

    private void init()
    {
        //SegmentedTimeline tl = SegmentedTimeline.newMondayThroughFridayTimeline();
        SegmentedTimeline tl = new SegmentedTimeline(SegmentedTimeline.DAY_SEGMENT_SIZE, 5, 2);
        tl.setStartTime(SegmentedTimeline.firstMondayAfter1900() + cdm.getWeekDayDrift()*SegmentedTimeline.DAY_SEGMENT_SIZE);
        //tl.addExceptions(cdm.getExcludeDates());
        xAx.setTimeline(tl);
        xAx.setTickMarkPosition(DateTickMarkPosition.END);
        mainPlot.setGap(0);
        chPanel.setMaximumDrawHeight(1600);
        chPanel.setMaximumDrawWidth(2400);
        chPanel.setRangeZoomable(false);
        chPanel.setZoomInFactor(0.9);
        chPanel.setZoomOutFactor(1.1);
        //scpChart.setViewportView(chPanel);
        //JScrollPane sp = new JScrollPane(chPanel);


        initCombo();
        initCpyCombo();
        //initList();
        spChart.setRightComponent(chPanel);
        //spChart.setRightComponent(sp);
        //chPanel.addChartMouseListener(new CoordinateUpdater(lblCoordinate, chPanel));
        initPopupMenu();
        updateChart();
        updateTxnItem();
    }
    private void initPopupMenu()
    {
        MouseListener[] list = chPanel.getMouseListeners();
        for(MouseListener m : list)
            chPanel.removeMouseListener(m);
        MouseMotionListener[] mlist = chPanel.getMouseMotionListeners();
        for(MouseMotionListener m : mlist)
            chPanel.removeMouseMotionListener(m);
        //chPanel.addMouseListener(l);
        chPanel.addMouseListener(g);
        chPanel.addMouseListener(m);
        //chPanel.addMouseListener(h);
        //chPanel.addMouseMotionListener(l);
        chPanel.addMouseMotionListener(g);
        chPanel.addMouseMotionListener(m);
        chPanel.addMouseWheelListener(wz);
        chPanel.addKeyListener(kb);
        //chPanel.addMouseMotionListener(h);
        chPanel.addChartMouseListener(cu);
        for(MouseListener m : list)
            chPanel.addMouseListener(m);
        for(MouseMotionListener m : mlist)
            chPanel.addMouseMotionListener(m);
        chPanel.setPopupMenu(ppmChart);
        chPanel.setFocusable(true);

    }
    public String getPlotName(XYPlot p)
    {
        for(Entry<String, XYPlot> e : plots.entrySet())
            if(e.getValue()==p)
                return e.getKey();
        return null;
    }
    private void popupBuySell(ActionEvent evt)
    {
        /*int y = lastPoint.y;
        XYPlot plot = plots.get("main");
        Rectangle2D plotArea = chPanel.getChartRenderingInfo().getPlotInfo().getSubplotInfo(0).getDataArea();
        double chartY = plot.getRangeAxis().java2DToValue(y, plotArea, plot.getRangeAxisEdge());
        Log.info("y=%d, value=%.2f", y, chartY);
         *
         */
        double price = ChartUtil.y2val(chPanel, g.getLastPoint());
        atv.showBuySell(evt.getActionCommand().toLowerCase(), cpy, MathUtil.round((float)price,3));

    }
    private void initCombo()
    {
        //DefaultComboBoxModel m = (DefaultComboBoxModel)cbIndicator.getModel();
        /*cbIndicator.addItem(new Indicator("Candlestick", "", 5, "main", CandlestickRenderer.class));
        cbIndicator.addItem(new Indicator("Vol", "y=v", 1, "vol", XYBarRenderer.class));
        cbIndicator.addItem(new Indicator("Line", "y=c&color=black", 5, "main", StandardXYItemRenderer.class));
        cbIndicator.addItem(new Indicator("SMA", "y=sma(c,30)&color=blue", 5, "main"));
        cbIndicator.addItem(new Indicator("EMA", "y=ema(c,17)", 5, "main"));
        cbIndicator.addItem(new Indicator("MACD", "y=aa(ema(c, 12), am(ema(c,26), -1))&color=red|y=ema(aa(ema(c,12), am(ema(c,26), -1)),9)&color=blue|y=0&color=black", 1, "macd"));
        cbIndicator.addItem(new Indicator("OBV", "y=obv(c,v)", 1, "obv"));
        cbIndicator.addItem(new Indicator("MFI", "y=mfi(h, l, c, v, 14)", 1, "mfi"));
        cbIndicator.addItem(new Indicator("Momentum", "y=mtm(c,14)&color=black", 1, "mtm"));
        cbIndicator.addItem(new Indicator("ATR", "y=atr(h,l,c,3)&color=black", 1, "atr"));
        cbIndicator.addItem(new Indicator("ROC", "y=roc(c,12)&color=red|y=0&color=blue", 1, "atr"));
        cbIndicator.addItem(new Indicator("Trix", "y=trix(c,15)&color=red|y=trix(c,9)&color=black|y=0&color=blue", 1, "trix"));
        cbIndicator.addItem(new Indicator("WilliamsR", "y=wlmr(h,l,c,14)&color=red|y=-20&color=blue|y=-80&color=blue", 1, "wlmr"));
        cbIndicator.addItem(new Indicator("StochasticR", "y=stor(h,l,c,14,3)&color=red|y=sma(stor(h,l,c,14,3),3)&color=black|y=80&color=blue|y=20&color=blue", 1, "stor"));
        cbIndicator.addItem(new Indicator("RSI", "y=rsi(c,14)&color=red|y=80&color=blue|y=20&color=blue", 1, "rsi"));
        cbIndicator.addItem(new Indicator("ADL", "y=adl(h,l,c,v)&color=blue", 1, "adl"));
        cbIndicator.addItem(new Indicator("Aroon", "y=aroon(c,14,1)&color=blue|y=aroon(c,14,-1)&color=red|y=30&color=black|y=70&color=black", 1, "aroon"));
        cbIndicator.addItem(new Indicator("ChaikinO", "y=cko(h,l,c,v,3,10)&color=blue|y=0&color=black", 1, "cko"));
        cbIndicator.addItem(new Indicator("Chaikinv", "y=ckv(h,l,10,10)&color=blue|y=0&color=black", 1, "ckv"));
        */
        cbIndicator.removeAllItems();
        Map<String, String> ids = (Map<String, String>)CfgMgr.getSubProp("chart.indicator.");
        ArrayList<Company> allCpy = new ArrayList<Company>();
        allCpy.add(cpy);
        allCpy.addAll(cpyInContrast);
        for(String k :ids.keySet())
        {
            String v = ids.get(k);
            for(Company c : allCpy)
            {
                try{
                String suf = c.getShortName().equals(cpy.getShortName())? "" : "."+c.getShortName();
                String[] ak = k.split("\\.");
                String param = replaceParam(v,suf);
                if(ak.length>=4)
                    cbIndicator.addItem(new Indicator(ak[0], param, Integer.valueOf(ak[2]), ak[1]+suf, Class.forName("org.jfree.chart.renderer.xy."+ak[3])));
                else
                    cbIndicator.addItem(new Indicator(ak[0], param, Integer.valueOf(ak[2]), ak[1]+suf));

                }catch(Exception x){Log.error(x);}
            }
        }
    }
    private void initCpyCombo()
    {
        cbbCpy.removeAllItems();
        List<Company> list = CompanyDAO.getAll();
        for(Company c :list)
            cbbCpy.addItem(c);
    }

    private String replaceParam(String template, String suf)
    {
        template = template.trim().toLowerCase();
        template = template.replaceAll("<h>", "h"+suf);
        template = template.replaceAll("<l>", "l"+suf);
        template = template.replaceAll("<o>", "o"+suf);
        template = template.replaceAll("<c>", "c"+suf);
        template = template.replaceAll("<v>", "v"+suf);
        return template;
    }
    private void initList()
    {
        DefaultListModel m = (DefaultListModel)ltIndicator.getModel();
        m.addElement(new Indicator((Indicator)cbIndicator.getModel().getElementAt(0)));
        m.addElement(new Indicator((Indicator)cbIndicator.getModel().getElementAt(1)));
    }

    public void addDP(DailyPriceLog dp)
    {
        //latestDP = dp;
        //dplist.push(dp);
        Date d = DateUtil.nextNDay(dp.getDate(), dateDrift);
        dates.push(d);
        if(showUpto.before(d))
            showUpto = d;
        if(accessUpto.before(d))
            accessUpto = d;
        updateChart();

    }
    public void setCapacity(int size)
    {
        //dplist.setCapacity(size);
        dates.clear();
        dates.setCapacity(size);
        dates.pushAll(cdm.getDaysUpto(DateUtil.nextNDay(accessFrom, dateDrift), DateUtil.nextNDay(showUpto, dateDrift)));
        updateChart();

    }
    public void setDPList(List<DailyPriceLog> list)
    {
        dplist.clear();
        dplist.pushAll(list);
        updateChart();
    }
    public void setDates(List<Date> list)
    {
        dates.clear();
        dates.pushAll(list);
        updateChart();
    }
    public void updateChart()
    {
        for(XYPlot p : plots.values())
            mainPlot.remove(p);
        plots.clear();
        //createPlot();
        createPlots();

    }
    private List<XYPlot> createPlots()
    {
        List<XYPlot> re = createIndicators();
        createMarks();
        createDraws();
        return re;
    }
    private void updateTxnItem()
    {
        boolean enabled = this.atv!=null;
        btnSell.setEnabled(enabled);
        btnBuy.setEnabled(enabled);
        btnNextDay.setEnabled(enabled);
        this.miBuy.setEnabled(enabled);
        this.miSell.setEnabled(enabled);
        this.btnTest.setVisible(false);
        btnSell.setVisible(false);
        btnBuy.setVisible(false);
    }
    private List<XYPlot> createIndicators()
    {
        List<XYPlot> re = new ArrayList<XYPlot>();
        //re.add(createXYPlot());
        DefaultListModel m = (DefaultListModel)ltIndicator.getModel();
        for(Object o : m.toArray())
        {
            try{
            Indicator p = (Indicator) o;
            if(p.type != IDType.Indicator)
                continue;
            XYPlot xp = plots.get(p.plot);
            int datasetCount=0;
            if(xp == null)
            {
                xp = new XYPlot();
                xp.setDomainAxis(xAx);
                NumberAxis y = new NumberAxis(p.plot.toUpperCase());
                y.setAutoRangeIncludesZero(false);
                xp.setRangeAxis(y);
                plots.put(p.plot, xp);
                mainPlot.add(xp, p.weight);

            }
            else
                datasetCount=xp.getDatasetCount();
            XYItemRenderer xr = (XYItemRenderer)p.render.getConstructor().newInstance();
            //XYDataset ds = cdm.getDateset(getDates(), p.params, xr);
            XYDataset ds = cdm.getDateset(dates, p.params, xr);
            int i = datasetCount;
            xp.setDataset(i, ds);
            xp.setRenderer(i, xr);
            re.add(xp);
            }catch(Exception e){Log.error(e);}
        }
        return re;
    }
    private void createMarks()
    {
        DefaultListModel m = (DefaultListModel)ltIndicator.getModel();
        for(Object o : m.toArray())
        {
            try{
            Indicator p = (Indicator) o;
            if(p.type == IDType.VMark)
            {
                List<ValueMarker> makers = cdm.getMarker(p.params);
                for(XYPlot pt : plots.values())
                {
                    for(ValueMarker mk : makers)
                        pt.addDomainMarker(mk);
                }
            }
            else if(p.type == IDType.HMark)
            {
                List<ValueMarker> makers = cdm.getMarker(p.params);
                for(ValueMarker mk : makers)
                    plots.get(p.plot).addRangeMarker(mk);

            }
            }catch(Exception e ){Log.error(e);}
        }

    }
    private void createDraws()
    {
        DefaultListModel m = (DefaultListModel)ltIndicator.getModel();
        for(Object o : m.toArray())
        {
            try{
            Indicator p = (Indicator) o;
            if(p.type == IDType.LineDraw)
            {
                List<XYLineAnnotation> lines = cdm.getAnnotation(p.params);
                for(XYLineAnnotation pt : lines)
                    plots.get(p.plot).addAnnotation(pt);
            }
            else if(p.type == IDType.HandDraw)
            {
                XYDataset ds = cdm.getHandDraw(p.params);
                XYPlot plot = plots.get(p.plot);
                int c = plot.getDatasetCount();
                plot.setDataset(c, ds);
                plot.setRenderer(c, GroupDrawer.hdRenderer);
            }
            else if(p.type == IDType.Arc)
            {
                List<XYShapeAnnotation> lines = cdm.getArcAnnotation(p.params);
                for(XYShapeAnnotation pt : lines)
                    plots.get(p.plot).addAnnotation(pt);
            }
            }catch(Exception e ){Log.error(e);}
        }

    }

    public ChartDataMgr getDataMgr()
    {
        return cdm;
    }
    public ChartPanel getPanel()
    {
        return chPanel;
    }
    public XYPlot getMainPlot()
    {
        return mainPlot;
    }
    public void resetButtonGroup()
    {
        btnGroup.clearSelection();
    }
  
    public void addToIndicatorList(Indicator id)
    {
        ((DefaultListModel)ltIndicator.getModel()).addElement(id);
    }

    public void updateCdntLable(String s)
    {
        lblCoordinate.setText(s);
    }
    public void setTrace(boolean v, boolean h)
    {
        chPanel.setVerticalAxisTrace(h);
        chPanel.setHorizontalAxisTrace(v);
        boolean t = !v&&!h;
        chPanel.setDisplayToolTips(t);
        cu.setIsActive(t);

    }
    public void addCpyInContrast(Company c)
    {
        if(!cpyInContrast.contains(c))
        {
            cpyInContrast.add(c);
            cdm.addCpyData(c);
            initCombo();
        }
    }
    public void updateMeasure(List<PointDiff> diffs)
    {
        StringBuilder sb = new StringBuilder("");
        for(PointDiff p : diffs)
        {
            if(p.getTxnDays()==0)
                continue;
            sb.append(p);
            sb.append("\n-------------------\n\n");
        }
        tfMeasure.setText(sb.toString());
        tfMeasure.setCaretPosition(tfMeasure.getText().length()-1);
    }
    public void move(double multi)
    {
        int n = Double.valueOf(dates.getCapacity()*multi).intValue();
        if(Math.abs(n)==0)
            n = 1;
        showUpto = DateUtil.nextNDay(showUpto, n);
        if(showUpto.before(accessFrom))
            showUpto=accessFrom;
        else if(showUpto.after(accessUpto))
            showUpto=accessUpto;
        setCapacity(dates.getCapacity());
    }
}
