/*
 * DataAnalyserAboutBox.java
 */

package com.mu.stock.ui;

import com.mu.collection.AutoDiscardingQueue;
import com.mu.stock.dao.AccountDAO;
import com.mu.stock.dao.CompanyDAO;
import com.mu.stock.dao.DailyPriceDAO;
import com.mu.stock.entity.Account;
import com.mu.stock.entity.Company;
import com.mu.stock.entity.DailyPriceLog;
import com.mu.stock.entity.TxnLog;
import com.mu.stock.indicator.CandleStick;
import com.mu.stock.txn.Market;
import com.mu.util.DateUtil;
import com.mu.util.MathUtil;
import com.mu.util.StringUtil;
import com.mu.util.log.Log;
import com.mu.util.ui.TableUtil;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.jdesktop.application.Action;

public class AccountTxnView extends javax.swing.JDialog {

    public AccountTxnView(java.awt.Frame parent, Account acct) {
        super(parent);
        initComponents();
        this.acct = acct;
        init();
    }

    @Action public void closeAboutBox() {
        dispose();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ppmBuySell = new javax.swing.JPopupMenu();
        miBuy = new javax.swing.JMenuItem();
        miSell = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mi1m1 = new javax.swing.JMenuItem();
        mi3m1 = new javax.swing.JMenuItem();
        mi6m1 = new javax.swing.JMenuItem();
        mi1y1 = new javax.swing.JMenuItem();
        mi3y1 = new javax.swing.JMenuItem();
        mi5y1 = new javax.swing.JMenuItem();
        miAll1 = new javax.swing.JMenuItem();
        ppmBuySellPf = new javax.swing.JPopupMenu();
        miBuyPf = new javax.swing.JMenuItem();
        miSellPf = new javax.swing.JMenuItem();
        ppmDP = new javax.swing.JPopupMenu();
        miChart = new javax.swing.JMenuItem();
        mi1m = new javax.swing.JMenuItem();
        mi3m = new javax.swing.JMenuItem();
        mi6m = new javax.swing.JMenuItem();
        mi1y = new javax.swing.JMenuItem();
        mi3y = new javax.swing.JMenuItem();
        mi5y = new javax.swing.JMenuItem();
        miAll = new javax.swing.JMenuItem();
        ppmTxn = new javax.swing.JPopupMenu();
        miCancel = new javax.swing.JMenuItem();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnNextDay = new javax.swing.JButton();
        lblDate = new javax.swing.JLabel();
        lblSummary = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPortfolio = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPfDp = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblTxn = new javax.swing.JTable();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblDp = new javax.swing.JTable();
        jSplitPane4 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        ltTags = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblCpy = new javax.swing.JTable();
        lblName = new javax.swing.JLabel();
        tfNextNDay = new javax.swing.JTextField();

        ppmBuySell.setName("ppmBuySell"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.mu.stock.ui.DataAnalyserApp.class).getContext().getResourceMap(AccountTxnView.class);
        miBuy.setText(resourceMap.getString("miBuy.text")); // NOI18N
        miBuy.setName("miBuy"); // NOI18N
        miBuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miBuyActionPerformed(evt);
            }
        });
        ppmBuySell.add(miBuy);

        miSell.setText(resourceMap.getString("miSell.text")); // NOI18N
        miSell.setName("miSell"); // NOI18N
        miSell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSellActionPerformed(evt);
            }
        });
        ppmBuySell.add(miSell);

        jSeparator1.setName("jSeparator1"); // NOI18N
        ppmBuySell.add(jSeparator1);

        mi1m1.setText(resourceMap.getString("mi1m1.text")); // NOI18N
        mi1m1.setName("mi1m1"); // NOI18N
        mi1m1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi1m1ActionPerformed(evt);
            }
        });
        ppmBuySell.add(mi1m1);

        mi3m1.setText(resourceMap.getString("mi3m1.text")); // NOI18N
        mi3m1.setName("mi3m1"); // NOI18N
        mi3m1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi3m1ActionPerformed(evt);
            }
        });
        ppmBuySell.add(mi3m1);

        mi6m1.setText(resourceMap.getString("mi6m1.text")); // NOI18N
        mi6m1.setName("mi6m1"); // NOI18N
        mi6m1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi6m1ActionPerformed(evt);
            }
        });
        ppmBuySell.add(mi6m1);

        mi1y1.setText(resourceMap.getString("mi1y1.text")); // NOI18N
        mi1y1.setName("mi1y1"); // NOI18N
        mi1y1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi1y1ActionPerformed(evt);
            }
        });
        ppmBuySell.add(mi1y1);

        mi3y1.setText(resourceMap.getString("mi3y1.text")); // NOI18N
        mi3y1.setName("mi3y1"); // NOI18N
        mi3y1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi3y1ActionPerformed(evt);
            }
        });
        ppmBuySell.add(mi3y1);

        mi5y1.setText(resourceMap.getString("mi5y1.text")); // NOI18N
        mi5y1.setName("mi5y1"); // NOI18N
        mi5y1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi5y1ActionPerformed(evt);
            }
        });
        ppmBuySell.add(mi5y1);

        miAll1.setText(resourceMap.getString("miAll1.text")); // NOI18N
        miAll1.setName("miAll1"); // NOI18N
        miAll1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAll1ActionPerformed(evt);
            }
        });
        ppmBuySell.add(miAll1);

        ppmBuySellPf.setName("ppmBuySellPf"); // NOI18N

        miBuyPf.setText(resourceMap.getString("miBuyPf.text")); // NOI18N
        miBuyPf.setName("miBuyPf"); // NOI18N
        miBuyPf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miBuyPfActionPerformed(evt);
            }
        });
        ppmBuySellPf.add(miBuyPf);

        miSellPf.setText(resourceMap.getString("miSellPf.text")); // NOI18N
        miSellPf.setName("miSellPf"); // NOI18N
        miSellPf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSellPfActionPerformed(evt);
            }
        });
        ppmBuySellPf.add(miSellPf);

        ppmDP.setName("ppmDP"); // NOI18N

        miChart.setText(resourceMap.getString("miChart.text")); // NOI18N
        miChart.setName("miChart"); // NOI18N
        miChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miChartActionPerformed(evt);
            }
        });
        ppmDP.add(miChart);

        mi1m.setText(resourceMap.getString("mi1m.text")); // NOI18N
        mi1m.setName("mi1m"); // NOI18N
        mi1m.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi1mActionPerformed(evt);
            }
        });
        ppmDP.add(mi1m);

        mi3m.setText(resourceMap.getString("mi3m.text")); // NOI18N
        mi3m.setName("mi3m"); // NOI18N
        mi3m.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi3mActionPerformed(evt);
            }
        });
        ppmDP.add(mi3m);

        mi6m.setText(resourceMap.getString("mi6m.text")); // NOI18N
        mi6m.setName("mi6m"); // NOI18N
        mi6m.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi6mActionPerformed(evt);
            }
        });
        ppmDP.add(mi6m);

        mi1y.setText(resourceMap.getString("mi1y.text")); // NOI18N
        mi1y.setName("mi1y"); // NOI18N
        mi1y.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi1yActionPerformed(evt);
            }
        });
        ppmDP.add(mi1y);

        mi3y.setText(resourceMap.getString("mi3y.text")); // NOI18N
        mi3y.setName("mi3y"); // NOI18N
        mi3y.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi3yActionPerformed(evt);
            }
        });
        ppmDP.add(mi3y);

        mi5y.setText(resourceMap.getString("mi5y.text")); // NOI18N
        mi5y.setName("mi5y"); // NOI18N
        mi5y.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mi5yActionPerformed(evt);
            }
        });
        ppmDP.add(mi5y);

        miAll.setText(resourceMap.getString("miAll.text")); // NOI18N
        miAll.setName("miAll"); // NOI18N
        miAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAllActionPerformed(evt);
            }
        });
        ppmDP.add(miAll);

        ppmTxn.setName("ppmTxn"); // NOI18N

        miCancel.setText(resourceMap.getString("miCancel.text")); // NOI18N
        miCancel.setName("miCancel"); // NOI18N
        miCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCancelActionPerformed(evt);
            }
        });
        ppmTxn.add(miCancel);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("AcctTxn"); // NOI18N

        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setName("jLabel3"); // NOI18N

        btnNextDay.setText(resourceMap.getString("btnNextDay.text")); // NOI18N
        btnNextDay.setName("btnNextDay"); // NOI18N
        btnNextDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextDayActionPerformed(evt);
            }
        });

        lblDate.setText(resourceMap.getString("lblDate.text")); // NOI18N
        lblDate.setName("lblDate"); // NOI18N

        lblSummary.setText(resourceMap.getString("lblSummary.text")); // NOI18N
        lblSummary.setName("lblSummary"); // NOI18N

        jScrollPane7.setBorder(null);
        jScrollPane7.setName("jScrollPane7"); // NOI18N

        jTabbedPane1.setName("jTabbedPane1"); // NOI18N
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(728, 542));

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        tblPortfolio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "null", "null", "null", "null", "null"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPortfolio.setName("tblPortfolio"); // NOI18N
        tblPortfolio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPortfolioMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblPortfolioMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tblPortfolio);
        tblPortfolio.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tblPortfolio.columnModel.title0")); // NOI18N
        tblPortfolio.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tblPortfolio.columnModel.title1")); // NOI18N
        tblPortfolio.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("tblPortfolio.columnModel.title2")); // NOI18N
        tblPortfolio.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("tblPortfolio.columnModel.title3")); // NOI18N

        jSplitPane1.setTopComponent(jScrollPane2);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        tblPfDp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPfDp.setName("tblPfDp"); // NOI18N
        tblPfDp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblPfDpMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tblPfDp);
        tblPfDp.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tblPfDp.columnModel.title0")); // NOI18N
        tblPfDp.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tblPfDp.columnModel.title1")); // NOI18N
        tblPfDp.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("tblPfDp.columnModel.title2")); // NOI18N
        tblPfDp.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("tblPfDp.columnModel.title3")); // NOI18N

        jSplitPane1.setRightComponent(jScrollPane3);

        jTabbedPane1.addTab(resourceMap.getString("jSplitPane1.TabConstraints.tabTitle"), jSplitPane1); // NOI18N

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        tblTxn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblTxn.setName("tblTxn"); // NOI18N
        tblTxn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblTxnMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(tblTxn);
        tblTxn.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tblTxn.columnModel.title0")); // NOI18N
        tblTxn.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tblTxn.columnModel.title1")); // NOI18N
        tblTxn.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("tblTxn.columnModel.title2")); // NOI18N
        tblTxn.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("tblTxn.columnModel.title3")); // NOI18N

        jTabbedPane1.addTab(resourceMap.getString("jScrollPane4.TabConstraints.tabTitle"), jScrollPane4); // NOI18N

        jSplitPane2.setDividerLocation(400);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setName("jSplitPane2"); // NOI18N

        jScrollPane6.setName("jScrollPane6"); // NOI18N

        tblDp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblDp.setName("tblDp"); // NOI18N
        tblDp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblDpMouseReleased(evt);
            }
        });
        jScrollPane6.setViewportView(tblDp);

        jSplitPane2.setRightComponent(jScrollPane6);

        jSplitPane4.setName("jSplitPane4"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        ltTags.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        ltTags.setName("ltTags"); // NOI18N
        ltTags.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ltTagsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(ltTags);

        jSplitPane4.setLeftComponent(jScrollPane1);

        jScrollPane5.setName("jScrollPane5"); // NOI18N

        tblCpy.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "null", "Title 6", "Title 7", "Title 8", "Title 9"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCpy.setName("tblCpy"); // NOI18N
        tblCpy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCpyMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblCpyMouseReleased(evt);
            }
        });
        jScrollPane5.setViewportView(tblCpy);
        tblCpy.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tblCpy.columnModel.title0")); // NOI18N
        tblCpy.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tblCpy.columnModel.title1")); // NOI18N
        tblCpy.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("tblCpy.columnModel.title2")); // NOI18N
        tblCpy.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("tblCpy.columnModel.title3")); // NOI18N

        jSplitPane4.setRightComponent(jScrollPane5);

        jSplitPane2.setLeftComponent(jSplitPane4);

        jTabbedPane1.addTab(resourceMap.getString("jSplitPane2.TabConstraints.tabTitle"), jSplitPane2); // NOI18N

        jScrollPane7.setViewportView(jTabbedPane1);

        lblName.setText(resourceMap.getString("lblName.text")); // NOI18N
        lblName.setName("lblName"); // NOI18N

        tfNextNDay.setText(resourceMap.getString("tfNextNDay.text")); // NOI18N
        tfNextNDay.setName("tfNextNDay"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSummary, javax.swing.GroupLayout.DEFAULT_SIZE, 893, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(339, 339, 339)
                                .addComponent(jLabel3)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblName)
                        .addGap(127, 127, 127)
                        .addComponent(lblDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 316, Short.MAX_VALUE)
                        .addComponent(tfNextNDay, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnNextDay)
                        .addGap(275, 275, 275))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 913, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnNextDay)
                        .addComponent(lblDate)
                        .addComponent(lblName)
                        .addComponent(tfNextNDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSummary)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addContainerGap(729, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(70, 70, 70)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNextDayActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnNextDayActionPerformed
    {//GEN-HEADEREND:event_btnNextDayActionPerformed
        int i = Integer.valueOf(tfNextNDay.getText().trim());
        for(int j=0; j<i; j++)
            nextDay();
    }//GEN-LAST:event_btnNextDayActionPerformed

    private void tblCpyMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblCpyMouseClicked
    {//GEN-HEADEREND:event_tblCpyMouseClicked
        if(evt.getClickCount()>1)
        {
            populateDpTable(tblCpy, tblDp);
        }
    }//GEN-LAST:event_tblCpyMouseClicked

    private void ltTagsValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_ltTagsValueChanged
    {//GEN-HEADEREND:event_ltTagsValueChanged
        filterCpyTbl();
    }//GEN-LAST:event_ltTagsValueChanged

    private void miBuyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miBuyActionPerformed
    {//GEN-HEADEREND:event_miBuyActionPerformed
        showBuySell(TxnLog.Buy);
    }//GEN-LAST:event_miBuyActionPerformed

    private void tblCpyMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblCpyMouseReleased
    {//GEN-HEADEREND:event_tblCpyMouseReleased
        if(evt.isPopupTrigger())
        {
            ppmBuySell.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tblCpyMouseReleased

    private void tblPortfolioMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblPortfolioMouseClicked
    {//GEN-HEADEREND:event_tblPortfolioMouseClicked
        if(evt.getClickCount()>1)
        {
            populateDpTable(tblPortfolio, tblPfDp);
        }
    }//GEN-LAST:event_tblPortfolioMouseClicked

    private void miBuyPfActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miBuyPfActionPerformed
    {//GEN-HEADEREND:event_miBuyPfActionPerformed
        showBuySell(TxnLog.Buy);
    }//GEN-LAST:event_miBuyPfActionPerformed

    private void miSellPfActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miSellPfActionPerformed
    {//GEN-HEADEREND:event_miSellPfActionPerformed
        showBuySell(TxnLog.Sell);
    }//GEN-LAST:event_miSellPfActionPerformed

    private void tblPortfolioMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblPortfolioMouseReleased
    {//GEN-HEADEREND:event_tblPortfolioMouseReleased
        if(evt.isPopupTrigger())
        {
            ppmBuySell.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tblPortfolioMouseReleased

    private void miChartActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miChartActionPerformed
    {//GEN-HEADEREND:event_miChartActionPerformed
        showSelectedChart();
    }//GEN-LAST:event_miChartActionPerformed

    private void tblPfDpMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblPfDpMouseReleased
    {//GEN-HEADEREND:event_tblPfDpMouseReleased
        if(evt.isPopupTrigger())
        {
            ppmDP.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tblPfDpMouseReleased

    private void tblDpMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblDpMouseReleased
    {//GEN-HEADEREND:event_tblDpMouseReleased
        if(evt.isPopupTrigger())
        {
            ppmDP.show(evt.getComponent(), evt.getX(), evt.getY());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_tblDpMouseReleased

    private void miCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miCancelActionPerformed
    {//GEN-HEADEREND:event_miCancelActionPerformed
        List<TxnLog> list = TableUtil.getSelectedObj(tblTxn, TxnLog.class, 0);
        if(list==null || list.isEmpty())
            return;
        for(TxnLog t : list)
            acct.withdrawTxn(t);
        initTxnTab();
    }//GEN-LAST:event_miCancelActionPerformed

    private void miSellActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miSellActionPerformed
    {//GEN-HEADEREND:event_miSellActionPerformed
        showBuySell(TxnLog.Sell);
    }//GEN-LAST:event_miSellActionPerformed

    private void tblTxnMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblTxnMouseReleased
    {//GEN-HEADEREND:event_tblTxnMouseReleased
        if(evt.isPopupTrigger())
            ppmTxn.show(evt.getComponent(), evt.getX(), evt.getY());

    }//GEN-LAST:event_tblTxnMouseReleased

    private void mi1yActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mi1yActionPerformed
    {//GEN-HEADEREND:event_mi1yActionPerformed
        showChart(255);
    }//GEN-LAST:event_mi1yActionPerformed

    private void mi3yActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mi3yActionPerformed
    {//GEN-HEADEREND:event_mi3yActionPerformed
        showChart(255*3);
    }//GEN-LAST:event_mi3yActionPerformed

    private void mi5yActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mi5yActionPerformed
    {//GEN-HEADEREND:event_mi5yActionPerformed
        showChart(255*5);
    }//GEN-LAST:event_mi5yActionPerformed

    private void miAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miAllActionPerformed
    {//GEN-HEADEREND:event_miAllActionPerformed
        showChart(Integer.MAX_VALUE);
}//GEN-LAST:event_miAllActionPerformed

    private void mi1y1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mi1y1ActionPerformed
    {//GEN-HEADEREND:event_mi1y1ActionPerformed
        showCpyChart(255);
    }//GEN-LAST:event_mi1y1ActionPerformed

    private void mi3y1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mi3y1ActionPerformed
    {//GEN-HEADEREND:event_mi3y1ActionPerformed
        showCpyChart(255*3);
    }//GEN-LAST:event_mi3y1ActionPerformed

    private void mi5y1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mi5y1ActionPerformed
    {//GEN-HEADEREND:event_mi5y1ActionPerformed
        showCpyChart(255*5);
    }//GEN-LAST:event_mi5y1ActionPerformed

    private void miAll1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miAll1ActionPerformed
    {//GEN-HEADEREND:event_miAll1ActionPerformed
        showCpyChart(Integer.MAX_VALUE);
    }//GEN-LAST:event_miAll1ActionPerformed

    private void mi1mActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mi1mActionPerformed
    {//GEN-HEADEREND:event_mi1mActionPerformed
        showChart(23);
    }//GEN-LAST:event_mi1mActionPerformed

    private void mi3mActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mi3mActionPerformed
    {//GEN-HEADEREND:event_mi3mActionPerformed
        showChart(23*3);
    }//GEN-LAST:event_mi3mActionPerformed

    private void mi6mActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mi6mActionPerformed
    {//GEN-HEADEREND:event_mi6mActionPerformed
        showChart(23*6);
    }//GEN-LAST:event_mi6mActionPerformed

    private void mi1m1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mi1m1ActionPerformed
    {//GEN-HEADEREND:event_mi1m1ActionPerformed
        showCpyChart(23);
        // TODO add your handling code here:
    }//GEN-LAST:event_mi1m1ActionPerformed

    private void mi3m1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mi3m1ActionPerformed
    {//GEN-HEADEREND:event_mi3m1ActionPerformed
        showCpyChart(23*3);
        // TODO add your handling code here:
    }//GEN-LAST:event_mi3m1ActionPerformed

    private void mi6m1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mi6m1ActionPerformed
    {//GEN-HEADEREND:event_mi6m1ActionPerformed
        showCpyChart(23*6);
// TODO add your handling code here:
    }//GEN-LAST:event_mi6m1ActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNextDay;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblSummary;
    private javax.swing.JList ltTags;
    private javax.swing.JMenuItem mi1m;
    private javax.swing.JMenuItem mi1m1;
    private javax.swing.JMenuItem mi1y;
    private javax.swing.JMenuItem mi1y1;
    private javax.swing.JMenuItem mi3m;
    private javax.swing.JMenuItem mi3m1;
    private javax.swing.JMenuItem mi3y;
    private javax.swing.JMenuItem mi3y1;
    private javax.swing.JMenuItem mi5y;
    private javax.swing.JMenuItem mi5y1;
    private javax.swing.JMenuItem mi6m;
    private javax.swing.JMenuItem mi6m1;
    private javax.swing.JMenuItem miAll;
    private javax.swing.JMenuItem miAll1;
    private javax.swing.JMenuItem miBuy;
    private javax.swing.JMenuItem miBuyPf;
    private javax.swing.JMenuItem miCancel;
    private javax.swing.JMenuItem miChart;
    private javax.swing.JMenuItem miSell;
    private javax.swing.JMenuItem miSellPf;
    private javax.swing.JPopupMenu ppmBuySell;
    private javax.swing.JPopupMenu ppmBuySellPf;
    private javax.swing.JPopupMenu ppmDP;
    private javax.swing.JPopupMenu ppmTxn;
    private javax.swing.JTable tblCpy;
    private javax.swing.JTable tblDp;
    private javax.swing.JTable tblPfDp;
    private javax.swing.JTable tblPortfolio;
    private javax.swing.JTable tblTxn;
    private javax.swing.JTextField tfNextNDay;
    // End of variables declaration//GEN-END:variables

    private Account acct;
    private TableRowSorter sorter;
    private HashMap<Company, ChartView> cache = new HashMap<Company, ChartView>();
    BuySellView av;

    private void init()
    {
        initPortfolioTab();
        initFilter();
        Date d = acct.getCurrentDate();
        initSummary();
        initMktTab(d);
        initTxnTab();
    }
    private void initSummary()
    {
        lblDate.setText(DateUtil.toDateStr(DateUtil.nextNDay(acct.getCurrentDate(), acct.getDateDrift())));
        lblName.setText(acct.getName());
        lblSummary.setText(String.format("%.2f%%,  P/L:$%.0f,  Mkt:$%.0f,  Cash:$%.0f,  Total:$%.0f, ",
            acct.getProfitPerc(), acct.getProfit(), acct.getPortfolioValue(), acct.getCash(),acct.getTotalValue()));
    }
    public String  getSummary()
    {
        return lblSummary.getText();
    }
    public Account getAcct()
    {
        return acct;
    }
    private void showCpyChart(int lastNday)
    {
        JTable ct = jTabbedPane1.getSelectedIndex()==0 ? tblPortfolio:tblCpy;
        Company c = (Company)TableUtil.getFirstSelectedObj(ct, Company.class, 0);
        showChart(c, acct.getCurrentDate(), lastNday);
    }
    private void showChart(Company c, Date showTo, int lastNday)
    {
        ChartView cv = cache.get(c);
        if(cv==null || !cv.isShowing())
        {
            JFrame mainFrame = DataAnalyserApp.getApplication().getMainFrame();
            //cv = new ChartView(mainFrame, list, acct.getDateDrift(), acct.getPriceDrift(), lastNday, this);
            cv = new ChartView(mainFrame, c, acct.getStartDate(), acct.getCurrentDate(), showTo, lastNday, this);
            cv.setLocationRelativeTo(mainFrame);
            cache.put(c, cv);
        }
        else
        {
            cv = cache.get(c);
            cv.setCapacity(lastNday);
        }
        DataAnalyserApp.getApplication().show(cv);
    }
    private void showSelectedChart()
    {
        JTable t = jTabbedPane1.getSelectedIndex()==0 ? tblPfDp:tblDp;
        List<DailyPriceLog> list = null;
        list = TableUtil.getSelectedObj(t, DailyPriceLog.class, 0);
        if(list.isEmpty())
            return;
        int lastNday = list.size();
        showChart(list.get(0).getCompany(), list.get(lastNday-1).getDate(), lastNday);
    }

    private void showChart(int lastNday)
    {
        JTable t = jTabbedPane1.getSelectedIndex()==0 ? tblPfDp:tblDp;
        DailyPriceLog d = (DailyPriceLog)TableUtil.getLastObj(t, DailyPriceLog.class, 0);
        showChart(d.getCompany(), acct.getCurrentDate(), lastNday);
    }
    public void initTxnTab()
    {
        List<TxnLog> list = AccountDAO.getTxnLog(acct);
        String[] cpyCol = new String[]{
            "Object", "Date", "Status", "Company", "Action", "Amount", "Price", "Total", "%PL"
        };
        HashMap<Long, DailyPriceLog> map = new HashMap<Long, DailyPriceLog>();
        Object[][] rows = new Object[list.size()][cpyCol.length];
        int i = 0;
        for (TxnLog d : list)
        {
            try{
            int j=0;
            rows[i][j++]=d;
            rows[i][j++]=DateUtil.toDateStr(DateUtil.nextNDay(d.getDate(), acct.getDateDrift()));
            rows[i][j++]=d.getStatus();
            rows[i][j++]=d.getCompany();
            rows[i][j++]=d.getAction();
            rows[i][j++]=d.getAmount();
            rows[i][j++]=d.getPrice();
            rows[i][j++]=d.getTotalValue();
            DailyPriceLog dp = map.get(d.getCompany().getId());
            if(dp==null)
            {
                dp = DailyPriceDAO.getLogByDate(d.getCompany(), acct.getCurrentDate());
                map.put(d.getCompany().getId(), dp);
            }
            if(dp!=null && d.getStatus().equals(TxnLog.Done))
            {
                float curPri = dp.getAdjClose()*acct.getPriceDrift();
                float txnPri = d.getPrice();
                if(d.getAction().equals(TxnLog.Sell))
                    rows[i][j++]=MathUtil.round((txnPri - curPri)*100/curPri, 1);
                else
                    rows[i][j++]=MathUtil.round((curPri - txnPri)*100/txnPri, 1);
            }
            i++;
            }catch(Exception e){Log.error(e);}
        }
        DefaultTableModel m = (DefaultTableModel) tblTxn.getModel();
        m.setDataVector(rows, cpyCol);
        tblTxn.removeColumn(tblTxn.getColumn("Object"));
        //jTblCompany.setCellSelectionEnabled(true);
        //jTblCompany.getColumnModel().
        tblTxn.setAutoCreateRowSorter(true);

        
        
    }
    private void addChartDp()
    {
        for(Company c : cache.keySet())
        {
            ChartView cv = cache.get(c);
            if(cv.isShowing())
            {
                DailyPriceLog d = DailyPriceDAO.getLogByDate(c, acct.getCurrentDate());
                cv.addDP(d);
            }
        }
    }
    private void addDpRow(JTable dp)
    {
        if(dp.getRowCount()==0)
            return;
        Company c = ((DailyPriceLog)dp.getModel().getValueAt(0, 0)).getCompany();
        DailyPriceLog d = DailyPriceDAO.getLogByDate(c, acct.getCurrentDate());
        if(d == null)
            return;
        Object[] row = new Object[dp.getModel().getColumnCount()];
        float f = acct.getPriceDrift();
        try{
        int j=0;
        Float gp = (d.getAdjClose()-d.getHLYGravity())*100/d.getHLYGravity();
        CandleStick cs = new CandleStick(d.getAdjOpen()*f, d.getAdjClose()*f, d.getAdjHigh()*f, d.getAdjLow()*f);
        row[j++]=d;
        row[j++]=DateUtil.toDateStr(DateUtil.nextNDay(d.getDate(), acct.getDateDrift()));
        row[j++]=MathUtil.round(d.getAdjClose()*f,3);
        row[j++]=MathUtil.round(d.getAdjHigh()*f,3);
        row[j++]=MathUtil.round(d.getAdjLow()*f,3);
        row[j++]=MathUtil.round(d.getAdjOpen()*f,3);
        row[j++]=d.getChangePer();
        row[j++]=MathUtil.round(d.getHLYGravity()*f,3);
        row[j++]= MathUtil.round(gp, 2);
        row[j++]=d.getVolume();
        row[j++]=d.getVolRatio();
        row[j++] = MathUtil.round(cs.getDiffPerCO(), 2);
        row[j++] = MathUtil.round(cs.getDiffPerHL(), 2);
        row[j++] = cs.getType();
        }catch(Exception e){Log.error(e);}

        ((DefaultTableModel )dp.getModel()).addRow(row);
        TableUtil.scrollToVisible(dp, dp.getRowCount()-1, 0);

    }
    private void populateDpTable(JTable cpy, JTable dp)
    {
        Company c = (Company)TableUtil.getFirstSelectedObj(cpy, Company.class, 0);
        if(c != null)
        {
            List<DailyPriceLog> list = DailyPriceDAO.getByCompany(c, acct.getStartDate(), acct.getCurrentDate());
            String[] cpyCol = new String[]{
                "Object", "Date", "Close", "High", "Low", "Open", "%P", "Gravity", "%G", "Vol", "Vol Ratio", "CO", "HL", "Type"
            };

            Object[][] rows = new Object[list.size()][cpyCol.length];
            int i = 0;
            float f = acct.getPriceDrift();
            for (DailyPriceLog d : list)
            {
                try{
                int j=0;
                Float gp = (d.getAdjClose()-d.getHLYGravity())*100/d.getHLYGravity();
                CandleStick cs = new CandleStick(d.getAdjOpen()*f, d.getAdjClose()*f, d.getAdjHigh()*f, d.getAdjLow()*f);
                rows[i][j++]=d;
                rows[i][j++]=DateUtil.toDateStr(DateUtil.nextNDay(d.getDate(), acct.getDateDrift()));
                rows[i][j++]=MathUtil.round(d.getAdjClose()*f,3);
                rows[i][j++]=MathUtil.round(d.getAdjHigh()*f,3);
                rows[i][j++]=MathUtil.round(d.getAdjLow()*f,3);
                rows[i][j++]=MathUtil.round(d.getAdjOpen()*f,3);
                rows[i][j++]=d.getChangePer();
                rows[i][j++]=MathUtil.round(d.getHLYGravity()*f,3);
                rows[i][j++]= MathUtil.round(gp, 2);
                rows[i][j++]=d.getVolume();
                rows[i][j++]=d.getVolRatio();
                rows[i][j++] = MathUtil.round(cs.getDiffPerCO(), 2);
                rows[i][j++] = MathUtil.round(cs.getDiffPerHL(), 2);
                rows[i][j++] = cs.getType();
                i++;
                }catch(Exception e){Log.error(e);}
            }
            DefaultTableModel m = (DefaultTableModel) dp.getModel();
            m.setDataVector(rows, cpyCol);
            //jTblCompany.setCellSelectionEnabled(true);
            //jTblCompany.getColumnModel().
            //dp.setAutoCreateRowSorter(true);
            TableRowSorter s = TableUtil.getSorter(dp);
            dp.setRowSorter(s);

            dp.getColumnModel().removeColumn(dp.getColumn("Object"));

        }
        
    }

    private void initPortfolioTab()
    {
        TreeMap<Company, ArrayList<Object>> pt = acct.getPortfolio();
        String[] cols = new String[]{
            "Company", "Amount", "Average Price", "Current Price", "Market Value", "P/L", "%"
        };

        Object[][] rows = new Object[pt.size()][cols.length];
        int i = 0;
        for (Company c : pt.navigableKeySet())
        {
            try{
            int j=0;
            ArrayList<Object> ll = pt.get(c);
            Integer amt = Integer.valueOf(ll.get(0).toString());
            Float avg = Float.valueOf(ll.get(1).toString());
            Float cur = Float.valueOf(ll.get(2).toString());
            rows[i][j++]=c;
            rows[i][j++]=ll.get(0);
            rows[i][j++]=MathUtil.round(avg,3);
            rows[i][j++]=MathUtil.round(cur,3);
            rows[i][j++]=MathUtil.round(cur*amt,2);
            rows[i][j++]=MathUtil.round((cur-avg)*amt,2);
            rows[i][j++]=MathUtil.round((cur-avg)*100/avg,2);
            i++;
            }catch(Exception e){Log.error(e);}
        }
        DefaultTableModel m = (DefaultTableModel) tblPortfolio.getModel();
        m.setDataVector(rows, cols);
        //jTblCompany.setCellSelectionEnabled(true);
        //jTblCompany.getColumnModel().
        tblPortfolio.setAutoCreateRowSorter(true);

    }

    private void initMktTab(Date date)
    {

        List<DailyPriceLog> list = DailyPriceDAO.getLogByDate(date);
        if(list==null)
            list = new ArrayList<DailyPriceLog>();
        String[] cpyCol = new String[]{
            "Name", "Close", "High", "Low", "Open", "%P", "Gravity", "%G", "Vol", "Vol Ratio", "CO", "HL", "Type", "Tags"
        };

        Object[][] rows = new Object[list.size()][cpyCol.length];
        int i = 0;
        float f = acct.getPriceDrift();
        for (DailyPriceLog d : list)
        {
            try{
            int j=0;
            Float gp = (d.getAdjClose()-d.getHLYGravity())*100/d.getHLYGravity();
            CandleStick c = new CandleStick(d.getAdjOpen()*f, d.getAdjClose()*f, d.getAdjHigh()*f, d.getAdjLow()*f);

            rows[i][j++]=d.getCompany();
            rows[i][j++]=MathUtil.round(d.getAdjClose()*f,3);
            rows[i][j++]=MathUtil.round(d.getAdjHigh()*f,3);
            rows[i][j++]=MathUtil.round(d.getAdjLow()*f,3);
            rows[i][j++]=MathUtil.round(d.getAdjOpen()*f,3);
            rows[i][j++]=d.getChangePer();
            rows[i][j++]=MathUtil.round(d.getHLYGravity()*f,3);
            rows[i][j++]= MathUtil.round(gp, 2);
            rows[i][j++]=d.getVolume();
            rows[i][j++]=d.getVolRatio();
            rows[i][j++] = MathUtil.round(c.getDiffPerCO(), 2);
            rows[i][j++] = MathUtil.round(c.getDiffPerHL(), 2);
            rows[i][j++] = c.getType();
            rows[i][j++] = d.getCompany().getTags();
            }catch(Exception e){Log.error(e);}
            finally{
                i++;
            }
        }
        DefaultTableModel m = (DefaultTableModel) tblCpy.getModel();
        m.setDataVector(rows, cpyCol);
        //jTblCompany.setCellSelectionEnabled(true);
        //jTblCompany.getColumnModel().
        //tblCpy.setAutoCreateRowSorter(true);
        //sorter = new TableRowSorter(tblCpy.getModel());
        sorter = TableUtil.getSorter(tblCpy);
        tblCpy.setRowSorter(sorter);

    }
    private void initFilter()
    {
        List<String> filters = CompanyDAO.getTags();
        DefaultListModel modle = new DefaultListModel();
        modle.clear();
        for(String s : filters)
        {
            modle.addElement(s);
        }
        ltTags.setModel(modle);
        ltTags.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

    }
    private void filterCpyTbl()
    {
        String tag = (String)ltTags.getSelectedValue();
        TagFilter tg = new TagFilter(tag);
        sorter.setRowFilter(tg);
    }
    public void showBuySell(String action, Company c, float price)
    {
        if(c != null)
        {
            JFrame mainFrame = DataAnalyserApp.getApplication().getMainFrame();
            if(av==null)
            {

                av = new BuySellView(mainFrame, this, acct, c, action, price+"");
                av.setLocationRelativeTo(mainFrame);
            }
            else
                av.init(this, acct, c, action, price+"");
            //av.setSize(800, 800);
            DataAnalyserApp.getApplication().show(av);
        }
    }
    public void showBuySell(String action)
    {

        JTable t = jTabbedPane1.getSelectedIndex()==0 ? tblPortfolio:tblCpy;
        int idx = jTabbedPane1.getSelectedIndex()==0 ? 3:1;
        Company c = (Company)TableUtil.getFirstSelectedObj(t, Company.class, 0);
        Float price = (Float)TableUtil.getFirstSelectedObj(t, Float.class, idx);
        showBuySell(action, c, price);
    }
    private Company getSelectedCpy()
    {
        JTable t = jTabbedPane1.getSelectedIndex()==0 ? tblPortfolio:tblCpy;
        Company c = (Company)TableUtil.getFirstSelectedObj(t, Company.class, 0);
        if(c==null)
        {
            t = jTabbedPane1.getSelectedIndex()==0 ? tblPfDp:tblDp;
            c = ((DailyPriceLog)t.getModel().getValueAt(0, 0)).getCompany();

        }
        return c;
    }
    public void nextDay()
    {
        Market.nextDay(acct);
        Date d = acct.getCurrentDate();
        initSummary();
        initMktTab(d);
        initPortfolioTab();
        initTxnTab();
        filterCpyTbl();
        addDpRow(tblDp);
        addDpRow(tblPfDp);
        addChartDp();

    }


    class TagFilter extends RowFilter<Object, Object>
    {
        String tag;
        public TagFilter(String tag)
        {
            this.tag = tag;
        }
        public boolean include(Entry<? extends Object, ? extends Object> entry)
        {
            String tags = entry.getStringValue(13)+",";
            if (StringUtil.isEmpty(tag)||tag.equalsIgnoreCase("all")||tags.indexOf(tag)!=-1)
            {
                return true;
            }
            return false;
        }
    }


}
